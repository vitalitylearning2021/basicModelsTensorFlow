# -*- coding: utf-8 -*-
"""TF_Linear_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z56ijLmvQl5htHUe04ZBebqlrD6lmebi
"""

import tensorflow as tf
import numpy as np

import matplotlib.pyplot as plt

rng = np.random

alpha     = 0.0001  # --- Learning rate
numIter   = 1000    # --- Number of gradient descent iterations
skipIter  = 50      # --- Number of iterations to skip for presenting the results

# --- Data
X = np.array([20.1, 7.1, 16.1, 14.9, 16.7, 8.8, 9.7, 10.3, 22, 16.2, 12.1, 10.3, 14.5, 12.4, 9.6, 12.2, 10.8, 14.7, 19.7, 11.2,	
              10.1, 11, 12.2, 9.2, 23.5, 9.4, 15.3, 9.6, 11.1, 5.3, 7.8, 25.3, 16.5, 12.6, 12, 11.5, 17.1, 11.2, 12.2, 10.6, 19.9, 
              14.5, 15.5, 17.4, 8.4, 10.3, 0.2, 12.5, 16.7, 8.5, 12.2	])
Y = np.array([31.5, 18.9, 35, 31.6, 22.6, 26.2, 14.1, 24.7, 44.8, 23.2, 31.4, 17.7, 18.4, 23.4, 22.6, 16.4, 21.4, 26.5, 31.7, 11.9, 
              20, 12.5, 18, 14.2, 37.6, 22.2, 17.8, 18.3, 28, 8.1, 14.7, 37.8, 15.7, 28.6, 11.7, 20.1, 30.1, 18.2, 17.2, 19.6, 29.2, 
              17.3, 28.2, 38.2, 17.8, 10.4, 19, 16.8, 21.5, 15.9, 17.7	])

# --- Random starting guess
m = tf.Variable(rng.randn())
b = tf.Variable(rng.randn())

# --- Linear model function y = m * x + b
def linearModel(x):
    return m * x + b

# --- Cost function
def costFunction(y_model, y_data):
    return tf.reduce_mean(tf.square(y_model - y_data))

# --- Setting the Stochastic Gradient Descent Optimizer
optimizer = tf.optimizers.SGD(alpha)

# --- Optimization step
def optimizationStep():
    # --- Uses GradientTape for automatic differentiation
    with tf.GradientTape() as g:
        y_model           = linearModel(X)
        costFunctionValue = costFunction(y_model, Y)

    # --- Compute gradients
    gradients = g.gradient(costFunctionValue, [m, b])
    
    # --- Update the unknowns m and b
    optimizer.apply_gradients(zip(gradients, [m, b]))

# --- Iterations loop
for iter in range(1, numIter + 1):

    optimizationStep()
    
    if iter % skipIter == 0:
        y_model           = linearModel(X)
        costFunctionValue = costFunction(y_model, Y)
        print("iteration number: %i, cost function: %f, m: %f, b: %f" % (iter, costFunctionValue, m.numpy(), b.numpy()))

# --- Display results
plt.plot(X, Y, 'ro', label = 'Observations')
#plt.plot(X, np.array(m * X + b), label = 'Fitting')
plt.xlabel('Poverty level')
plt.ylabel('Birth rate')
plt.legend()
plt.show()
